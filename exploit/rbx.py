import tkinter as tk
from tkinter import messagebox
import ctypes
import hashlib
import requests
import http.server
import socketserver
import json
import threading
from urllib.parse import unquote
from exploit.funcs.instance import Instance
from exploit.funcs.bytecode import Bytecode as RBXBytecode
import win32clipboard
import os

coreGui = 0

class HW_PROFILE_INFOA(ctypes.Structure):
    _fields_ = [("dwDockInfo", ctypes.c_ulong),
                ("szHwProfileGuid", ctypes.c_char * 39),
                ("szHwProfileName", ctypes.c_char * 80)]

def log(message):
    print(Fore.GREEN + f'[INFO] {Fore.WHITE} {message}')

def get_current_hw_profile():
    log("Fetching current hardware profile...")
    hardware = HW_PROFILE_INFOA()
    ctypes.windll.user32.GetCurrentHwProfileA(ctypes.byref(hardware))
    log(f"Hardware profile obtained: {hardware.szHwProfileGuid.decode()}")
    return hardware

def update_hwid():
    hardware = get_current_hw_profile()
    hwid = hashlib.md5(hardware.szHwProfileGuid).hexdigest()
    log(f"HWID generated: {hwid}")
    return hwid

def path_no_escape(f_path: str):
    current_dir = os.getcwd()
    image_path = os.path.join(current_dir, "workspace", *f_path.split("\\"))
    log(f"Generated file path: {image_path}")
    return image_path.replace("..", "")

def load_source(source):
    log(f"Loading source script: {source[:30]}... (truncated)")
    CoreGui = Instance(coreGui)
    script = CoreGui.FindFirstChild("Arima")
    log(f"Script found: {script}")
    if type(source) == str:
        log("Setting module bypass...")
        script.SetModuleBypass()
        script.Bytecode = RBXBytecode.Compile(
            f"return function(...) {source} \nend", f"loadstring.btc"
        )
    log("Source loaded successfully.")
    return [True]

hwid = update_hwid

def gsbc(script):
    log("Getting script bytecode...")
    script_bytecode = script.Bytecode
    log(f"Bytecode length: {len(script_bytecode)}")
    return [True, (script_bytecode.hex())]

def gethwid():
    log("Returning HWID...")
    return hwid

def setclipboard(data):
    log(f"Setting clipboard with data: {data[:30]}... (truncated)")
    if type(data) != str:
        log("Data is not a string. Operation aborted.")
        return

    win32clipboard.OpenClipboard()
    try:
        win32clipboard.EmptyClipboard()
        win32clipboard.SetClipboardData(win32clipboard.CF_UNICODETEXT, data)
        log("Clipboard set successfully.")
    finally:
        win32clipboard.CloseClipboard()

def httpget(url):
    log(f"Performing GET request to URL: {url}")
    output = requests.get(url)
    log(f"Response received with status code: {output.status_code}")
    return output.text

def writefile(file_name, data):
    log(f"Writing data to file: {file_name}")
    file_path = f'./workspace/{file_name}'
    try:
        with open(file_path, "w") as file:
            file.write(data)
        log(f"File written successfully to: {file_path}")
        return True
    except Exception as e:
        log(f"Error writing file: {e}")
        return False

def delfile(file_name):
    log(f"Attempting to delete file: {file_name}")
    file_path = f"./workspace/{file_name}"
    if os.path.exists(file_path):
        try:
            os.remove(file_path)
            log(f"File deleted: {file_path}")
        except Exception as e:
            log(f"Failed to delete file: {e}")
            return "Failed to delete file"
    else:
        log(f"File does not exist: {file_path}")
        return "File does not exist"

def isfile(file_name):
    log(f"Checking if file exists: {file_name}")
    file_path = f"./workspace/{file_name}"
    exists = os.path.exists(file_path)
    log(f"File exists: {exists}")
    return exists

def readfile(file_name):
    log(f"Reading file: {file_name}")
    file_path = f"./workspace/{file_name}"
    if os.path.exists(file_path):
        try:
            with open(file_path, "r") as file:
                read = file.read()
            log(f"File read successfully: {file_name}")
            return read
        except Exception as e:
            log(f"Failed to read file: {e}")
            return "Failed to read file"
    else:
        log(f"File does not exist: {file_name}")
        return "File does not exist"

def makefolder(folder_name):
    f_path = path_no_escape(folder_name)
    log(f"Creating folder: {f_path}")
    try:
        if not os.path.isdir(f_path):
            os.mkdir(f_path)
        log(f"Folder created successfully: {f_path}")
        return True
    except Exception as e:
        log(f"Failed to create folder: {e}")
        return False

def execute(code: str):
    global toexec
    log(f"Executing code: {code[:30]}... (truncated)")
    toexec = code

class RequestHandler(http.server.SimpleHTTPRequestHandler):
    def log_message(self, format, *args):
        pass

    def do_GET(self):
        global toexec
        log(f"Received GET request: {self.path}")
        if self.path.startswith('/bridge'):
            query_params = self.path.split('?')[-1]
            params = {key: value for key, value in [param.split('=') for param in query_params.split('&')]}
            action = params.get('action')
            log(f"Action: {action}")

            if action:
                self.send_response(200)
                self.send_header("Content-type", "application/json")
                self.end_headers()

                if action == 'POLL':
                    log("Action: POLL")
                    response = {"code": toexec}
                    toexec = "DONT EXEC"
                    self.wfile.write(json.dumps(response).encode('utf-8'))

                elif action == "setclipboard":
                    log("Action: setclipboard")
                    sauce = params.get('arg1', '')
                    sauce = unquote(sauce)
                    setclipboard(sauce)
                    response = {"status": "success", "message": "Setclipboard succeeded"}
                    self.wfile.write(json.dumps(response).encode('utf-8'))

                elif action == "load_source":
                    log("Action: load_source")
                    source = params.get('arg1', '')
                    source = unquote(source)
                    load_source(source)
                    response = {"status": "success", "message": "Script loaded"}
                    self.wfile.write(json.dumps(response).encode('utf-8'))
            else:
                log("Action parameter missing in request")
                self.send_response(400)
                self.end_headers()
                self.wfile.write(b'{"error": "Action parameter missing"}')
        else:
            log(f"Invalid path: {self.path}")
            self.send_response(404)
            self.end_headers()

PORT = 8000

Handler = RequestHandler

def run_server():
    log(f"Starting server on port {PORT}")
    with socketserver.TCPServer(("", PORT), Handler) as httpd:
        log("Server started successfully")
        httpd.serve_forever()

def init(agbegbhr):
    global coreGui
    coreGui = agbegbhr
    log("Initializing server thread")
    server_thread = threading.Thread(target=run_server)
    server_thread.start()

def cgu(sex):
    global coreGui
    coreGui = sex
    log("CoreGui updated")

def on_press(event):
    global x, y
    x = event.x
    y = event.y
    log(f"Mouse pressed at ({x}, {y})")
