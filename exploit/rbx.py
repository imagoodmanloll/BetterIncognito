import tkinter as tk
from tkinter import messagebox
import ctypes
import hashlib
from tkinter import messagebox
import requests
import http.server
import socketserver
import json
import threading
from urllib.parse import unquote
from exploit.funcs.instance import Instance
from exploit.funcs.bytecode import Bytecode as RBXBytecode
import win32clipboard # type: ignore
import ctypes
import os
import tkinter as tk
from tkinter import Text, Button
from tkinter import *
coreGui = 0

class HW_PROFILE_INFOA(ctypes.Structure):
    _fields_ = [("dwDockInfo", ctypes.c_ulong),
                ("szHwProfileGuid", ctypes.c_char * 39),
                ("szHwProfileName", ctypes.c_char * 80)]

def get_current_hw_profile():
    hardware = HW_PROFILE_INFOA()
    ctypes.windll.user32.GetCurrentHwProfileA(ctypes.byref(hardware))
    return hardware

def update_hwid():
    hardware = get_current_hw_profile()
    hwid = hashlib.md5(hardware.szHwProfileGuid).hexdigest()
    return hwid


def path_no_escape(f_path: str):
    current_dir = os.getcwd()
    image_path = os.path.join(current_dir, "workspace", *f_path.split("\\"))

    return image_path.replace("..", "")

def load_source(source):
    CoreGui = Instance(coreGui)
    script = CoreGui.FindFirstChild("Arima")
    print(script)
    print("setting")
    if type(source) == str:
        script.SetModuleBypass()
        script.Bytecode = RBXBytecode.Compile(
                f"return function(...) {source} \nend", f"loadstring.btc"
            )
        
    return [True]

hwid = update_hwid
def gsbc(script):
    script_bytecode = script.Bytecode
    return [True, (script_bytecode.hex())]
def gethwid():
    return hwid

def setclipboard(data):
    if type(data) != str:
        return

    win32clipboard.OpenClipboard()

    try:      
        win32clipboard.EmptyClipboard()
        win32clipboard.SetClipboardData(win32clipboard.CF_UNICODETEXT, data)
        success = True

    finally:
        win32clipboard.CloseClipboard()
def httpget(url):
    output = requests.get(url)
    return output.text

def writefile(file_name, data):
    file = open(f'./workspace/{file_name}', "w")

    try:
        file.write(data)

    except Exception as e:
        print("[ ERROR ] -> " + str(e))
        return False
    finally:
        file.close()
        return True


def delfile(file_name):
    exists = os.path.exists(f"./workspace/{file_name}")

    if exists:
        try:
            os.remove(f"./workspace/{file_name}")

        except Exception as e:
            return "Failed to delete file"
    else:
        return "File does not exist"

def isfile(file_name):
    exists = os.path.exists(f"./workspace/{file_name}")

    if exists:
        return True
    else:
        return False

def isfiles(file_name):
    exists = os.path.exists(f"./settings/{file_name}")

    if exists:
        return True
    else:
        return False

def readfiles(file_name):
    exists = os.path.exists(f"./settings/{file_name}")

    if exists:
        file = open(f"./settings/{file_name}", "r")

        try:
            read = file.read()

        except Exception as e:
            return "Failed to read file"

        finally:
            file.close()
            return read
    else:
        return "File does not exist"
def writefiles(file_name, data):
    file = open(f'./settings/{file_name}', "w")

    try:
        file.write(data)

    except Exception as e:
        print("[ ERROR ] -> " + str(e))
        return False
    finally:
        file.close()
        return True

def readfile(file_name):
    exists = os.path.exists(f"./workspace/{file_name}")

    if exists:
        file = open(f"./workspace/{file_name}", "r")

        try:
            read = file.read()
          
        except Exception as e:
            return "Failed to read file"

        finally:
            file.close()
            return read
    else:
        return "File does not exist"
        
def makefolder(folder_name):
    f_path = path_no_escape(folder_name)
    succeed = False

    try:
        if not os.path.isdir(f_path):
            os.mkdir(f_path)

        succeed = True
    except Exception as e:
        print(f"Bridge error: failed to make folder in '{f_path}'", e)

    return succeed
base_script = ["LocalScript", "ModuleScript"]
def getbytecode(arg):
    # TODO: implement bytecode decompressor
    succeed = False
    script_bytecode: bytes = None

    if isinstance(arg, Instance) and arg.ClassName in base_script:
        script_bytecode = arg.Bytecode
        succeed = True if script_bytecode is bytes else False
    else:
        print("Bridge error: can't get bytecode because args[0] isn't a script")

    return [succeed, (script_bytecode.hex() if succeed else None)]
def execute(code: str):
    global toexec
    toexec = code

class RequestHandler(http.server.SimpleHTTPRequestHandler):
    def log_message(self, format, *args):
        pass

    def do_GET(self):
        global toexec
        if self.path.startswith('/bridge'):
            query_params = self.path.split('?')[-1]
            params = {key: value for key, value in [param.split('=') for param in query_params.split('&')]}
            
            action = params.get('action')
            if action:
                self.send_response(200)
                self.send_header("Content-type", "application/json")
                self.end_headers()
                if action == 'POLL':
                    response = {"code": toexec}
                    toexec = "DONT EXEC"
                    self.wfile.write(json.dumps(response).encode('utf-8'))
                elif action == "setclipboard":
                    sauce = params.get('arg1', '')
                    sauce = unquote(sauce)
                    setclipboard(sauce)
                    response = {"status": "success", "message": f"Setclipboard succeeded"}
                    self.wfile.write(json.dumps(response).encode('utf-8'))
                elif action == "load_source":
                    source = params.get('arg1', '')
                    source = unquote(source)
                    load_source(source)
                    response = {"status": "success", "message": f"Script loaded"}
                    self.wfile.write(json.dumps(response).encode('utf-8'))
                elif action == "writefiles":
                    file_name = params.get('arg1', '')
                    data = params.get('arg2', '')

                    file_name = unquote(file_name)
                    data = unquote(data)

                    succeeded = writefiles(file_name, data)

                    response = {}

                    if succeeded:
                        response['status'] = "success"
                    else:
                        response['status'] = "failed"

                    response["message"] = "Writefile completed"

                    self.wfile.write(json.dumps(response).encode("utf-8"))
                elif action == "writefile":
                    file_name = params.get('arg1', '')
                    data = params.get('arg2', '')

                    file_name = unquote(file_name)
                    data = unquote(data)

                    succeeded = writefile(file_name, data)

                    response = {}

                    if succeeded:
                        response['status'] = "success"
                    else:
                        response['status'] = "failed"

                    response["message"] = "Writefile completed"

                    self.wfile.write(json.dumps(response).encode("utf-8"))
                elif action == "delfile":
                    file_name = params.get("arg1", "")
                    file_name = unquote(file_name)

                    response = delfile(file_name)

                    web_response = {}

                    if response == "File does not exist" or response == "Failed to delete file":
                        web_response["message"] = response
                        web_response["status"] = "error"
                    else:
                        web_response["message"] = response
                        web_response["status"] = "success"

                    self.wfile.write(json.dumps(web_response).encode('utf-8'))
                elif action == "isfiles":
                    file_name = params.get("arg1", "")
                    file_name = unquote(file_name)

                    response = isfiles(file_name)

                    web_response = {}

                    if response == False:
                        web_response["message"] = response
                        web_response["status"] = "error"
                    else:
                        web_response["message"] = response
                        web_response["status"] = "success"

                    self.wfile.write(json.dumps(web_response).encode('utf-8'))
                elif action == "isfile":
                    file_name = params.get("arg1", "")
                    file_name = unquote(file_name)

                    response = isfile(file_name)

                    web_response = {}

                    if response == False:
                        web_response["message"] = response
                        web_response["status"] = "error"
                    else:
                        web_response["message"] = response
                        web_response["status"] = "success"

                    self.wfile.write(json.dumps(web_response).encode('utf-8'))
                elif action == "readfiles":
                    file_name = params.get("arg1", "")
                    file_name = unquote(file_name)

                    response = readfiles(file_name)

                    web_response = {}

                    if response == "File does not exist" or response == "Failed to read file":
                        web_response["message"] = response
                        web_response["status"] = "error"
                    else:
                        web_response["message"] = response
                        web_response["status"] = "success"

                    self.wfile.write(json.dumps(web_response).encode('utf-8'))
                elif action == "getbytecode":
                    CoreGui = Instance(coreGui)
                    bridgi = CoreGui.GETBYTECODE.Value
                    response = getbytecode(bridgi)

                    web_response = {}

                    web_response["message"] = response
                    web_response["status"] = "success"

                    self.wfile.write(json.dumps(web_response).encode('utf-8'))
                elif action == "readfile":
                    file_name = params.get("arg1", "")
                    file_name = unquote(file_name)

                    response = readfile(file_name)

                    web_response = {}

                    if response == "File does not exist" or response == "Failed to read file":
                        web_response["message"] = response
                        web_response["status"] = "error"
                    else:
                        web_response["message"] = response
                        web_response["status"] = "success"
                    
                    self.wfile.write(json.dumps(web_response).encode('utf-8'))
                elif action == "makefolder":
                    folder_name = params.get("arg1", "")
                    folder_name = unquote(folder_name)

                    success = makefolder(folder_name)

                    response = {}

                    if success:
                        response["status"] = "success"
                        response["message"] = "Makefolder completed"
                    else:
                        response["status"] = "error"
                        response["message"] = "Failed to create folder"

                    self.wfile.write(json.dumps(response).encode('utf-8'))
                else:
                    response = {"status": "error", "message": f"Unknown action: {action}"}
                    self.wfile.write(json.dumps(response).encode('utf-8'))
            else:
                self.send_response(400)
                self.end_headers()
                self.wfile.write(b'{"error": "Action parameter missing"}')
        else:
            self.send_response(404)
            self.end_headers()

    def log_message(self, format, *args):
        pass

PORT = 8000

Handler = RequestHandler

def run_server():
    with socketserver.TCPServer(("", PORT), Handler) as httpd:
        httpd.serve_forever()

def init(agbegbhr):
    coreGui = agbegbhr
    server_thread = threading.Thread(target=run_server)
    server_thread.start()
def cgu(sex):
    coreGui = sex

def on_press(event):
    global x, y
    x = event.x
    y = event.y
