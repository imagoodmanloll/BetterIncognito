import os
import time
import win32pipe
import win32file
import base64
from exploit.funcs.bytecode import Bytecode as RBXBytecode
from colorama import Fore

PIPE_NAME = r'\\.\pipe\BetterIncongitoPipe'

class SkidPipeServer:
    def __init__(self):
        self.pipe = None

    def start(self):
        self.pipe = win32pipe.CreateNamedPipe(
            PIPE_NAME,
            win32pipe.PIPE_ACCESS_DUPLEX,
            win32pipe.PIPE_TYPE_MESSAGE | win32pipe.PIPE_READMODE_MESSAGE | win32pipe.PIPE_WAIT,
            win32pipe.PIPE_UNLIMITED_INSTANCES,
            65536,
            65536,
            0,
            None
        )
        print(Fore.GREEN + "[BETTERINCONGITO] Named pipe server started, waiting for client...")
        
        win32pipe.ConnectNamedPipe(self.pipe, None)
        print(Fore.GREEN + "[BETTERINCONGITO] Exploit Connected successfully.")

        while True:
            try:
                hr, message = win32file.ReadFile(self.pipe, 64 * 1024)
                if hr:
                    bytecode = message.decode('utf-8')
                    result = RBXBytecode.Compile(bytecode)
                    response = (Fore.GREEN + "[BETTERINCONGITO] Script executed successfully.").encode('utf-8')
                else:
                    response = (Fore.RED + "[BETTERINCONGITO] Failed to execute script.").encode('utf-8')
                
                win32file.WriteFile(self.pipe, response)
            except Exception as e:
                print(f"Error: {e}")
                break
        
        win32file.CloseHandle(self.pipe)

def runpipeserver():
    server_instance = SkidPipeServer()
    server_instance.start()

if __name__ == "__main__":
    runpipeserver()
